{"version":3,"sources":["multilateral-partitioning.coffee"],"names":[],"mappings":"AAKA,IAAA,yBAAA;;AAAA,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAJ,CAAA;;AAAA;AAGE,MAAA,kBAAA;;AAAA,mCAAA,MAAA,GAAQ,EAAR,CAAA;;AAAA,EACA,UAAA,GAAa,EADb,CAAA;;AAAA,EAEA,MAAA,GAAS,IAFT,CAAA;;AAAA,mCAIA,QAAA,GAAU,SAAC,KAAD,GAAA;AACR,QAAA,OAAA;AAAA,IAAA,IAAI,IAAC,CAAA,MAAM,CAAC,cAAR,CAAuB,KAAK,CAAC,IAA7B,CAAJ;AACE,MAAA,CAAA,GAAI,IAAC,CAAA,MAAO,CAAA,KAAK,CAAC,IAAN,CAAW,CAAC,kBAAxB,CAAA;AAAA,MACA,CAAA,GAAI,KAAK,CAAC,kBADV,CAAA;AAAA,MAEA,CAAA,GAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,CAAX,CAFJ,CAAA;AAAA,MAGA,OAAO,CAAC,GAAR,CAAY,CAAZ,CAHA,CADF;KAAA,MAAA;AAME,MAAA,IAAC,CAAA,MAAO,CAAA,KAAK,CAAC,IAAN,CAAR,GAAsB,KAAK,CAAC,kBAA5B,CANF;KADQ;EAAA,CAJV,CAAA;;AAAA,mCAcA,eAAA,GAAiB,SAAC,YAAD,GAAA;AACf,QAAA,eAAA;AAAA,IAAA,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,MAAD,IAAe,IAAA,MAAA,CAAO,EAAP,CAAzB,CAAA;AACA;SAAA,qBAAA,GAAA;AACE,oBAAA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAA,CADF;AAAA;oBAFe;EAAA,CAdjB,CAAA;;AAAA,mCAmBA,cAAA,GAAgB,SAAC,YAAD,GAAA;AACd,IAAA,IAAC,CAAA,kBAAD,GAAsB,IAAC,CAAA,kBAAD,IAA2B,IAAA,KAAA,CAAA,CAAjD,CAAA;WACA,IAAC,CAAA,eAAD,CAAiB,YAAjB,EAFc;EAAA,CAnBhB,CAAA;;AAuBa,EAAA,gCAAC,YAAD,GAAA;AACX,IAAA,IAAC,CAAA,cAAD,CAAgB,YAAhB,CAAA,CAAA;AAAA,IACA,IADA,CADW;EAAA,CAvBb;;gCAAA;;IAHF,CAAA","file":"multilateral-partitioning.js","sourceRoot":"/source/","sourcesContent":["# jsTest - Test Case Generator and Test Analyzer\n# @version v1.0.0\n# @link\n# @license ISC\n\n_ = require('lodash')\n\nclass MultilateralPartioning\n  inputs: {}\n  semaphores = {}\n  locked = true\n\n  addInput: (input) ->\n    if (@inputs.hasOwnProperty(input.name))\n      a = @inputs[input.name].equivalenceClasses\n      b = input.equivalenceClasses\n      c = _.merge(a, b)\n      console.log(e)\n    else\n      @inputs[input.name] = input.equivalenceClasses\n    return\n\n  addInputClasses: (inputClasses) ->\n    @inputs = @inputs || new Object({})\n    for input of inputClasses\n      @addInput(input)\n\n  addEquivalence: (inputClasses) ->\n    @equivalenceClasses = @equivalenceClasses || new Array()\n    @addInputClasses(inputClasses)\n\n  constructor: (inputClasses) ->\n    @addEquivalence(inputClasses)\n    @\n\n"]}