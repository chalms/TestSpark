{"version":3,"sources":["test-set.coffee"],"names":[],"mappings":"AAkBA,IAAA,mBAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,aAAR,CAAP,CAAA;;AAAA,IAEI,CAAC,KAAK,CAAC,aAAX,GACE;AAAA,EAAA,kBAAA,EAAoB,CAAC,SAAC,GAAD,GAAA;AAAS,WAAQ,GAAA,YAAe,MAAvB,CAAT;EAAA,CAAD,CAApB;AAAA,EACA,OAAA,EAAS,CAAC,SAAC,GAAD,GAAA;AAAS,WAAQ,CAAA,CAAE,GAAG,CAAC,IAAJ,KAAY,MAAZ,IAAyB,GAAG,CAAC,IAAJ,KAAY,IAAtC,CAAT,CAAT;EAAA,CAAD,CADT;AAAA,EAEA,YAAA,EAAc,CAAC,SAAC,GAAD,GAAA;AAAS,WAAQ,MAAA,CAAA,GAAU,CAAC,IAAX,KAAmB,QAA3B,CAAT;EAAA,CAAD,CAFd;AAAA,EAGA,SAAA,EACE;AAAA,IAAA,MAAA,EAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR;AAAA,IACA,GAAA,EAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADL;AAAA,IAEA,SAAA,EAAW;MAAC,CAAC,SAAC,GAAD,GAAA;AAAS,eAAQ,GAAA,KAAO,OAAf,CAAT;MAAA,CAAD,CAAD;KAFX;GAJF;CAHF,CAAA;;AAAA,aAaA,GAAgB,SAAA,GAAA;AACd,MAAA,KAAA;AAAA,EAAA,KAAA,GACE;AAAA,IAAA,IAAA,EAAM,SAAN;AAAA,IACA,OAAA,EAAS,CAAC,SAAA,GAAA;AAAM,aAAO,IAAI,CAAC,IAAZ,CAAN;IAAA,CAAD,CADT;GADF,CAAA;AAAA,EAIA,KAAK,CAAC,SAAN,GAAkB,SAAA,GAAA;AAAM,WAAO,OAAP,CAAN;EAAA,CAJlB,CAAA;AAAA,EAKA,KAAK,CAAC,MAAN,GAAe,SAAC,MAAD,GAAA;AAAY,WAAQ,MAAA,GAAS,CAAjB,CAAZ;EAAA,CALf,CAAA;AAAA,EAMA,KAAK,CAAC,GAAN,GAAY,SAAC,CAAD,EAAI,CAAJ,GAAA;AAAU,WAAQ,CAAA,GAAI,CAAZ,CAAV;EAAA,CANZ,CAAA;AAOA,SAAO,KAAP,CARc;AAAA,CAbhB,CAAA;;AAAA,IAuBI,CAAC,IAAL,CAAU,0CAAV,EAAsD,CAAC,SAAC,IAAD,GAAA;SACrD,IAAA,CACE;AAAA,IAAA,aAAA,EAAmB,IAAA,aAAA,CAAA,CAAnB;GADF,EADqD;AAAA,CAAD,CAAtD,CAvBA,CAAA","file":"test-set.js","sourceRoot":"/source/","sourcesContent":[" # jsTest - Test Case Generator and Test Analyzer\n # @version v1.0.0\n # @link\n # @license ISC\n\n\n# Test.tests.arr = (\n#   isPrototypeOfArray: ((obj) -> return (Object(obj).isPrototypeOf Array)),\n#   isNotEmpty: ((obj) -> return (obj.length is not 0)),\n#   hasObjectsOfType: ((obj) ->\n#     for o of obj\n#       if (typeof o is not 'string')\n#         return false\n#     return true\n#   )\n# )\n\n\nTest = require(\"./test/test\")\n\nTest.tests.ExampleObject = (\n  isInstanceOfObject: ((obj) -> return (obj instanceof Object)),\n  hasName: ((obj) -> return (!(obj.name is undefined or obj.name is null))),\n  nameIsString: ((obj) -> return (typeof obj.name is 'string')),\n  functions: (\n    addOne: [1, 2]\n    add: [3, 3, 6]\n    getString: [((obj) -> return (obj is \"Apple\"))] #Predicate verifier\n  )\n)\n\nExampleObject = () ->\n  _this = (\n    name: \"Chalmee\"\n    getName: (() -> return this.name )\n  )\n  _this.getString = () -> return \"Apple\"\n  _this.addOne = (number) -> return (number + 1)\n  _this.add = (a, b) -> return (a + b)\n  return _this\n\nTest.test(\"Testing Test module on object predicates\", ((test) ->\n  test((\n    ExampleObject: new ExampleObject()\n  ))\n))\n"]}