{"version":3,"sources":["test/test.coffee"],"names":[],"mappings":"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","file":"test/test.js","sourceRoot":"/source/","sourcesContent":["colors = require \"colors\"\n_ = require \"lodash\"\n\nhasFunction =  (obj, funct, args) ->\n  return (!(obj[funct] is undefined or obj[funct] is null))\n\ntests =\n  obj: (\n    isInstanceOfObject: ((obj) -> return (obj instanceof Object)),\n    hasName: ((obj) -> return (!(obj.name is undefined or obj.name is null))),\n    nameIsString: ((obj) -> return (typeof obj.name is 'string')),\n    functions: (\n      addOne: [1, 2]\n      add: [3, 3, 6]\n      getString: [((obj) -> return (obj is \"Apple\"))] #Predicate verifier\n    )\n  )\n  arr: (\n    isPrototypeOfArray: ((obj) -> return (Object(obj).isPrototypeOf Array)),\n    isNotEmpty: ((obj) -> return (obj.length is not 0)),\n    hasObjectsOfType: ((obj) ->\n        for o of obj\n          if (typeof o is not 'string')\n            return false\n        return true\n      )\n  )\n\nrunTest = (description, buildFunction, testFunction) ->\n  console.log(colors.cyan(\"\\n\" + description  + \"\\n\"))\n  buildFunction(testFunction)\n\nrunTest(\"Testing runtest module on object predicates\",\n  ((testFunct) ->\n    testObjects = {}\n    objectTest = new Object()\n    objectTest.name = \"Chalmee\"\n    objectTest.getName = (() ->\n        return this.name\n      )\n    objectTest.getString = () ->\n      return \"Apple\"\n    objectTest.addOne = (number) ->\n      return (number + 1)\n    objectTest.add = (a, b) ->\n      return (a + b)\n\n    testObjects[\"obj\"] = objectTest\n    testFunct(testObjects)\n\n  ),((testObjects) ->\n      count = 0\n      passed = 0\n      testFunctionUnderT = (tName, argsArray) ->\n        count += 1\n        lastItem = argsArray.pop()\n        inputArgs = argsArray\n        try\n          if hasFunction(subject, functionName, inputArgs)\n            if not (typeof lastItem is \"function\")\n              prev = lastItem\n              lastItem = (result) ->\n                return (prev is result)\n            actualResult = subject[functionName].apply(undefined, inputArgs)\n            s = if lastItem(actualResult) then colors.green(objectName + \" under test [\" + tName + \"] has working function \" + (functionName) + \" with output \" + actualResult + \". \" + (passed++).toString() + \" of \" + count + \" passed! \")\n            else colors.red(objectName + \" under test [\" + tName + \"] function \" + (functionName) + \" outputs \" + actualResult + \" when evaluated against test. \" + (passed).toString() + \" of \" + count + \" failed!\")\n          else\n            s = colors.red((objectName + \" under test[\" + tName + \"] does not have function \" + functionName + \" with \" + inputArgs + \" input arguements \" + (passed).toString() + \" of \" + count + \" passed!\"))\n        catch e\n          s = colors.red(e.toString())\n        finally\n          console.log(s)\n      for objectName of testObjects\n        subject = testObjects[objectName]\n        console.log colors.cyan(\"Tests suite: \" + objectName)\n        try\n          outObj = colors.yellow((JSON.stringify(subject)))\n        catch e\n          outObj = colors.yellow((subject))\n        finally\n          console.log(outObj)\n        for test of tests[objectName]\n          if (test is 'functions')\n            for functionName of tests[objectName].functions\n              aA = tests[objectName].functions[functionName]\n              if aA instanceof Object and typeof aA is not 'function'\n                for testN of o\n                  testFunctionUnderT(testN, aA[testN])\n              else\n                testFunctionUnderT(functionName, aA)\n          else\n            count += 1\n            subjectTest = tests[objectName][test]\n            try\n              s = if subjectTest(subject) then colors.green(objectName + \" passed test \" + test + \". \" + (passed++).toString() + \" of \" + count + \" passed.\") else colors.red(objectName + \" failed test \" + test + \". \" + (passed).toString() + \" of \" + count + \" passed!\")\n            catch e\n                s = colors.red(e.toString())\n            finally\n              console.log(s)\n        finalStr = passed + \" of \" + count + \" tests for object type: \" + objectName\n        finalOut = if passed is count then colors.green(finalStr) else if (passed > 0) then colors.cyan(finalStr) else colors.red(finalStr)\n        console.log(finalOut)\n  )\n)\n\n\n"]}