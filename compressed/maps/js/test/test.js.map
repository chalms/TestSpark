{"version":3,"sources":["test/test.coffee"],"names":[],"mappings":"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","file":"test/test.js","sourceRoot":"/source/","sourcesContent":["colors = require \"colors\"\n_ = require \"lodash\"\n\nclass Test\n  hasFunction =  (obj, funct, args) ->\n    return (!(obj[funct] is undefined or obj[funct] is null))\n\n  @tests: {}\n\n  @setHeaderLeftFormattting: (hl) ->\n    @headerLeft = hl\n\n  @setHeaderRightFormatting: (hr) ->\n    @headerRight = hr\n\n  @setColor: (c) ->\n    @color = c\n\n  @getHeaderLeftFormatting: () ->\n    return if @headerLeft then @headerLeft else \"\\n~\"\n\n  @getHeaderRightFormatting: () ->\n    return if @headerRight then @headerRight else \"~\\n\"\n\n  @getHeaderColor: () ->\n    return if @color then @color else colors.cyan\n\n  @getHeader: (description) ->\n    return Test.getHeaderColor()(Test.getHeaderLeftFormatting() + description + Test.getHeaderRightFormatting())\n\n  @test: (description, buildFunction) ->\n    console.log(Test.getHeader(description))\n    buildFunction((testObjects) ->\n      count = 0\n      passed = 0\n      testFunctionUnderT = (tName, argsArray) ->\n        count += 1\n        lastItem = argsArray.pop()\n        inputArgs = argsArray\n        try\n          if hasFunction(subject, functionName, inputArgs)\n            if not (typeof lastItem is \"function\")\n              prev = lastItem\n              lastItem = (result) ->\n                return (prev is result)\n            actualResult = subject[functionName].apply(undefined, inputArgs)\n            s = if lastItem(actualResult) then colors.green(objectName + \" under test [\" + tName + \"] has working function \" + (functionName) + \" with output \" + actualResult + \". \" + (++passed).toString() + \" of \" + count + \" passed! \")\n            else colors.red(objectName + \" under test [\" + tName + \"] function \" + (functionName) + \" outputs \" + actualResult + \" when evaluated against test. \" + (passed).toString() + \" of \" + count + \" failed!\")\n          else\n            s = colors.red((objectName + \" under test[\" + tName + \"] does not have function \" + functionName + \" with \" + inputArgs + \" input arguements \" + (passed).toString() + \" of \" + count + \" passed!\"))\n        catch e\n          s = colors.red(e.toString())\n        finally\n          console.log(s)\n      for objectName of testObjects\n        subject = testObjects[objectName]\n        console.log colors.cyan(\"Tests suite: \" + objectName)\n        try\n          outObj = colors.yellow((JSON.stringify(subject)))\n        catch e\n          outObj = colors.yellow((subject))\n        finally\n          console.log(outObj)\n        for test of Test.tests[objectName]\n          if (test is 'functions')\n            for functionName of Test.tests[objectName].functions\n              aA = Test.tests[objectName].functions[functionName]\n              if aA instanceof Object and typeof aA is not 'function'\n                for testN of o\n                  testFunctionUnderT(testN, aA[testN])\n              else\n                testFunctionUnderT(functionName, aA)\n          else\n            count += 1\n            subjectTest = Test.tests[objectName][test]\n            try\n              s = if subjectTest(subject) then colors.green(objectName + \" passed test \" + test + \". \" + (++passed).toString() + \" of \" + count + \" passed.\") else colors.red(objectName + \" failed test \" + test + \". \" + (passed).toString() + \" of \" + count + \" passed!\")\n            catch e\n                s = colors.red(e.toString())\n            finally\n              console.log(s)\n        finalStr = passed + \" of \" + count + \" tests passed for object type: \" + objectName\n        finalOut = if passed is count then colors.green(finalStr) else if (passed > 0) then colors.cyan(finalStr) else colors.red(finalStr)\n        console.log(finalOut)\n    )\n\nmodule.exports = Test\n\n"]}