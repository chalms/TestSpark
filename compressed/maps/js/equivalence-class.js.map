{"version":3,"sources":["equivalence-class.coffee"],"names":[],"mappings":"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","file":"equivalence-class.js","sourceRoot":"/source/","sourcesContent":["# jsTest - Test Case Generator and Test Analyzer\n# @version v1.0.0\n# @link\n# @license ISC\n\nSet = require('./set')\n\nclass EquivalenceClass\n  constraints: new Set\n  values: new Set\n  errorMessage:  new Array(5)\n\n  @__proto__.addValues = (values) ->\n    @values.add(values)\n\n  @__proto__.addConstraints = (constraints) ->\n    @constraints.add(constraints)\n\n  @__proto__.runError = () ->\n    @errorMessage[0] = \"Input: \" + arr[2] +  \"cannot be max or min constraint!\"\n    @errorMessage[1] = \"The max and min constraint must evaluate to false!\"\n    @errorMessage[2] =  value + \" is the \" +\n    @errorMessage[3] = (p[0] ? \"max\" : (p[1] ? \"min\" : \"result from a true\"))\n    @errorMessage[4] = message + \" constraint\"\n    @errorMessage = @errorMessage.join(\"\\n\")\n\n  @__proto__.valuesForConstraints = (constraints, values) ->\n    c.testInputs = values\n    run = (c, v) ->\n      j = c.length\n      r = new Array(j)\n      for i in [0...j]\n        arr = new Array(10)\n        arr[9] = v\n        arr[7] = Math.max(arr[9])\n        arr[8] = Math.min(arr[9])\n        while (arr[5] > 0 && arr[3] < 3)\n          arr[2] = arr[9].pop()\n          p[0] = arr[2] is arr[7]\n          p[1] = arr[2] is arr[8]\n          arr[2] = c[i] (arr[2])\n          if (arr[2]^((p[0] && !arr[0]) ^ (p[1] && !arr[1])))\n            throw new Error(\"e:1\")\n          else\n            arr[4] = arr[4] || arr[2]\n            arr[3] = parseInt(arr[4])+parseInt(!p[1]) + parseInt(p[1])\n        r[i] = c\n      return r\n    try\n      run(constraints, constraints.testInputs)\n    catch e\n      if e is \"e:1\"\n        @runError.call(errorMessage)\n        console.log(errorMessage)\n\n  @__proto__.isValid = () ->\n    return false unless (@constraints.length > 0)\n    return false unless (@values.length > 2)\n    return @.valuesForConstraints(@constraints, @values)\n\n  constructor: (variable, constraints, values) ->\n    @.addConstraints(constraints)\n    @.addValues(values)\n    @name = variable\n\n\n\n\n\n\n"]}